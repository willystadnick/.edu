CAPÍTULO 7

Neste capítulo vamos examinar dois dos sistemas operacionais mais populares da atualidade, o UNIX e o MS-DOS.
O UNIX pode rodar em muito mais arquiteturas de máquinas do qualquer outro sistema operacional conhecido, apesar de sua idade, ainda é um sistema moderno e elegante.
MS-DOS significa "Microsoft Disk Operating System", (Sistema Operacional em Disco da Microsoft). O Sistema Operacional permite que você controle seu computador dizendo a ele "para onde ir" e "o que fazer". O Sistema operacional da Microsoft, só roda em arquiteturas baseados nos processadores Intel 8088 até Pentium-Pró
Vamos examinar a história e a evolução do sistema em estudo, uma visão geral do sistema, passaremos à descrição dos princípios fundamentais do sistema operacional, analisaremos algumas das mais importantes chamadas de cada um dos sistemas. 
MS Windows = Todo computador precisa de uma via de comunicação entre ele e o usuário. Essa via de comunicação básica se chama Sistema Operacional. O Windows é um sistema operacional criado para facilitar a comunicação entre o usuário e o computador. O Windows é composto de janelas, que são a chave de todo o funcionamento e o entrosamento do usuário com o Windows. As janelas são praticamente todas iguais. São compostas de uma barra superior, que indica o nome do programa que está funcionando ou o nome da pasta que está sendo aberta; barra de menus, onde existem menus de comandos para controlar a janela ou o programa; área da janela, onde aparecem os arquivos e pastas nela contida; barra de status, que exibe informações sobre os objetos da janela.
Do MS DOS até Windows XP = O MS-DOS foi desenvolvido com base no sistema operacional CP/M e algumas idéias do Unix. O Windows 95/98 e Windows ME, apesar de várias melhorias e inovações, sempre estiveram associadas ao MS-DOS. O Windows NT acompanhou a evolução da família DOS-Windows e incorporou algumas de suas características, como a interface gráfica. Com isso, passaram a existir duas linhas de sistemas operacionais com arquiteturas completamente distintas, porém com a mesma interface para o usuário (Figura 1, abaixo).


O Windows XP, lançado em 2001, introduz uma nova interface gráfica e alguns poucos recursos adicionais, porém mantém a mesma arquitetura do Windows 2000. A partir do Windows XP, a intenção da Microsoft é descontinuar lentamente as famílias DOS-Windows e Windows NT/2000, integrando as duas linhas de sistemas operacionais.

UNICS = O primeiro levou o UNIX do obsoleto PDP-7 para os modernos PDP-11/20, e depois para o PDP-11/45 e para PDP-11/70. Estas duas últimas máquinas dominaram o mercado dos minicomputadores por quase toda a década de 70. O segundo desenvolvimento concentrou-se na linguagem na qual o UNIX foi escrito.Thompson resolveu reescrever o UNIX em uma linguagem de alto nível que ele próprio havia desenvolvido, a linguagem B. Esta linguagem era uma simplificação da BCPL, mas esta tentativa não teve sucesso. Ritchie então projetou uma linguagem para suceder a B, denominada C, e escreveu um excelente compilador para ela. Juntos, Thompson e Ritchie, reescreveram o UNIX em C. A publicação deste trabalho incentivou muitas universidades a solicitarem ao Bell Labs cópias do UNIX. A Bell Labs não colocava nenhuma objeção para licenciar o UNIX para as universidades, mediante o pagamento de uma pequena taxa.
A Portabilidade de UNIX = Estando o UNIX escrito em C, sua customização a uma nova máquina, conhecida como portabilidade, tornou-se muito mais simples do que nas primeiras versões experimentadas. O ato de implantar o sistema em uma nova arquitetura requer que, em primeiro lugar, exista um compilador C disponível para a máquina-alvo. A unidade de disco flexível de determinada máquina tem características diferentes que as de outra máquina, exigindo um driver diferente para gerenciá-lo.
O UNIX de Berkeley = Uma das primeiras grandes universidades americanas a adquirir o UNIX versão 6 foi a Universidade of California and Berkeley. Produziu e distribuiu uma versão melhorada do UNIX do PDP-11. O principal deles foi o uso da memória virtual e da paginação, permitindo que os programas fossem maiores que a memória física dividindo-os em páginas que iam e vinham da memória, conforme a necessidade. Diversos fabricantes de computadores basearam suas versões do UNIX de Berkeley, em conseqüência disto, o UNIX de Berkeley tornou-se absoluto nos mundos acadêmicos.
Padronização do UNIX = O fato de não haver padrão para o formato dos programas em binário, tornando impossível a qualquer fornecedor de software escrever pacotes de programas UNIX, na expectativa de que tais pacotes rodassem em qualquer sistema UNIX, como ocorre com o MS-DOS.
A primeira tentativa séria de reconciliar as duas vertentes do UNIX começou sob os auspícios do Comitê de Padronização do IEEE, uma organização muito respeitada, e, mais que isto, neutra. O projeto foi POSIX, as primeiras três letras significando Portable Operating System. 

Objetivos do UNIX
O UNIX é um sistema interativo, de tempo compartilhado e em seu nível mais baixo, um arquivo nada mais é do que um conjunto de bytes. O fato de se dispor de diferentes classes de arquivos para acesso seqüencial, acesso randômico, acesso controlado, acesso remoto, e assim por diante, é uma boa amostra das características de um bom sistema.
Uma das linhas básicas por trás do projeto do UNIX é o fato de cada programa só fazer exatamente uma única coisa, e fazê-la muito bem. Desta forma, compiladores não devem produzir listagens, pois outros programas podem fazer isto melhor que ele.
Os bons programadores têm um grande desprezo pela redundância gratuita. Por que ser obrigado a digitar copy, quando cp é o suficiente? Para extrair de um arquivo f todas as linhas contendo a seqüência  ard , o programador UNIX deve digitar: grep ard f.
Um sistema UNIX pode ser visualizado como uma espécie de pirâmide. As chamadas de sistema permitem que programas de usuário possam criar e gerenciar arquivos, Algumas versões do UNIX substituíram a interface orientada para teclado por outra orientada para mouse, sem mexer em uma única linha do sistema operacional.
Para sua conexão, você precisa, em primeiro lugar, digitar seu nome e usa senha, que são lidas e verificadas pelo programa login. O UNIX controla a propriedade de cada um de seus arquivos. A vantagem deste método é que ele elimina um dos maiores ramais dos sistemas de segurança, o medo de que o arquivo de senhas possa ser descoberto e acessado. Este tipo de simplicidade de projeto é característico do UNIX. 
Arquivos e Diretórios no UNIX ,Um arquivo UNIX é uma seqüência de 0 ou mais bytes, contendo informações arbitrárias. Os arquivos podem ser agrupados em diretórios, por conveniência de seus usuários.

CONCEITOS FUNDAMENTAIS DO UNIX

Processos do UNIX. 
O Modelo da Memória do UNIX.
O Sistema de Arquivos do UNIX
Entrada/Saída no UNIX

Os processos são criados em UNIX de uma forma especialmente simples. A chamada de sistema fork cria uma cópia exatamente igual ao processo original que a executou, processo este denominado processo-pai. O novo processo é denominado processo-filho. Tanto o pai quanto o filho passam a ser tratado a partir deste momento como dois processos independentes, cada um deles com sua própria imagem na memória. O modelo da memória do UNIX é extremamente simples e direto, com o objetivo de tornar seus programas portáveis, e de forma a tornar possível a implementação do UNIX em máquinas com diferentes formas de gerência da memória. Cada processo em UNIX tem um espaço de endereçamento constituído de três segmentos: código, dados e pilha. Existem duas maneiras de se especificar nomes de arquivos em UNIX. A primeira delas é usando um caminho absoluto, o que significa informar como alcançar o arquivo a partir do diretório-raiz.
Os nomes absolutos são grandes e muitas vezes inconvenientes, No UNIX tem conectado a ele dispositivos de entrada/saída tais como terminais, discos, impressoras e redes. É necessário que seja definido algum esquema que permita que programas venham a acessar tais dispositivos. Apesar de serem possíveis diversos tipos de soluções, a solução do UNIX é integrar todos os dispositivos no sistema de arquivo, nos chamados arquivos especiais. A entrada/saída envolvendo redes locais, cujo desenvolvimento pioneiro se deu no UNIX de Berkeley.
AS CHAMADAS DE SISTEMA DO UNIX = O primeiro grupo de chamadas trata da gerência dos processos. O uso da fork é a única maneira de se criar um novo processo. Ela cria uma cópia exata do processo original, incluindo todos os seus descritores de arquivo, registradores e tudo mais.


CAPÍTULO 13

O sistema de arquivos é uma parte importantíssima dos sistemas operacionais, pois ele fornece uma visão abstrata dos dados persistentes (também chamado de armazenamento secundário), além de ser responsável pelo serviço de nomes, acesso à arquivos e de sua organização geral.
" Nome: O nome do recurso a ser utilizado (como um arquivo) não deve indicar ou conter indícios de onde está localizado. 
" Localização: O usuário não precisa fornecer a localização física do recurso (no caso um arquivo) para encontrá-lo. 
" Acesso: O usuário não perceberá se o arquivo que está sendo usado é local ou remoto. Essa é a filosofia usada no sistema de arquivos virtual (VFS) do Linux.
" Replicação: Os arquivos do SAD podem ter cópias armazenadas em locais diferentes. O usuário não deve perceber que existem várias cópias do mesmo arquivo. Para ele só será apresentada uma, e quem a escolherá é o SAD.
" Concorrência ou Paralelismo: Vários usuários podem acessar o mesmo arquivo ao mesmo tempo, mas isso não deve afetar esses usuários nem outros. 
" Falha: O SAD deve garantir que o acesso aos arquivos seja ininterrupto e sem falhas, sem que o usuário saiba como isso é tratado.
Serviço de Nomes Distribuído
O serviço de nomes cuida de indicar a localização de um determinado arquivo dado o seu nome ou caminho. O serviço precisa oferecer ou resolução por nomes, ou resolução por localização, ou ambos.
Resolução por nomes mapeia nomes de arquivos legíveis por nós humanos, normalmente strings, para nomes de arquivos legíveis por computadores, que normalmente são números, facilmente manipuláveis pelas máquinas. Resolução por localização mapeia nomes globais para uma determinada localização, cada servidor é responsável por um determinado subconjunto de arquivos, ou cada um cuidaria de resolver a localização de determinados tipos de arquivos, etc
Serviço de Arquivos Distribuído
O serviço de arquivos é responsável por fornecer operações sobre os arquivos que compõe o sistema. 
Os arquivos podem ser armazenados de diferentes formas, dependendo do seu tipo e uso. É de responsabilidade desse serviço também cuidar para manter a integridade das operações realizadas nos arquivos. Por exemplo, quando uma aplicação altera algum arquivo, todas as demais aplicações que estiverem acessando-o devem perceber essa alteração o mais rápido possível. 
Existem dois tipos de implementação para um serviço de arquivos: acesso remoto e cópia remota, que podem ser com ou sem estado. No caso do acesso remoto, o cliente não possue um espaço para guardar os arquivos que estiver usando, e toda e qualquer operação realizada com os arquivos serão sempre através da rede. Isso pode deixar o sistema muito lento, já que depende da velocidade da rede. 
Já no caso da cópia remota, o cliente recebe uma cópia do arquivo para trabalhar, e depois quando tiver terminado ele o devolve as alterações para o servidor
Serviço de Diretórios Distribuído
Esse serviço é responsável por manter a organização dos arquivos armazenados no sistema. Ele fornece uma interface para que os usuários possam arranjar seus arquivos num formato hierárquico, que é estruturado em diretórios e subdiretórios. Um subdiretório só pode ter um único pai. Ele precisa ter a capacidade de identificar e remover arquivos que não estejam em diretório algum, como por exemplo, quando um diretório é removido, e todos os subdiretórios e seus respectivos arquivos ficam órfãos. 
Agora caso o esquema de diretórios permita múltiplos pais, então essa tarefa não é tão fácil, pois os arquivos ou subdiretórios ainda podem estar sendo referenciados por outros diretórios ou recursos. Qual sistema de arquivos usar num sistema distribuído? Para resolver esse tipo de dúvida, costuma-se tentar saber qual o tipo de aplicação que rodará nesse sistema, e a partir disso tentar descobrir o que é mais importante para o sistema, como tolerância a falhas, acesso concorrente, etc. Tolerância a Falhas 
Se um servidor cair ou ficar fora do ar ou da rede, o sistema de arquivos não pode perder informações e nem ficar indisponível total ou parcialmente. Além disso, os usuários não precisam saber como isso foi implementado e nem como funciona. Eles simplesmente requisitam um arquivo, e se algum servidor cair, o arquivo não pode ficar indisponível. Para isso é necessário implementar transparência a falhas. 

Acesso Concorrente =  Vários usuários podem acessar vários arquivos, ou os mesmos arquivos, sem sofrer danos, perda de performance ou quaisquer outras restrições. . A leitura concorrente pode ser implementada facilmente se não houver escrita concorrente, pois quando um arquivo estiver sendo lido, certamente ninguém poderá escrever nele.
Caso também se queira escrita concorrente, é necessário pensar um pouco, pois quando um cliente escreve num arquivo, todos os seus leitores devem ser avisados que o arquivo foi alterado, e todos seus escritores precisam tomar cuidado para não escreverem em cima das alterações que foram feitas por outros
Replicação de Arquivos 
Se um sistema de arquivos suporta essa funcionalidade, a confiança e a eficiência do serviço de arquivos é generosamente aumentada. Assim, replicação de arquivos provém tolerância a falhas, já que o usuário nem sequer percebe que o servidor que ele estava usando caiu e que outro (ou outros) entrou no lugar pra prover o arquivo que ele estava usando. Daí o sistema também deve oferecer transparência de replicação, pois o usuário não precisa saber como o sistema cuida da replicação desse arquivo. No caso da solução distribuída, existem dois tipos de implementação: A primeira utiliza comunicação em grupo, que consiste em quando ocorrer uma alteração por algum dos servidores, este manda um broadcast para os outros servidores dizendo que o arquivo foi alterado. A segunda utiliza votação e números de versão. Isso significa que quando um cliente pedir permissão para alterar um arquivo, os servidores votarão entre eles pra saber quem possui a versão mais recente, e esse servidor será 
 o servidor padrão daquele arquivo, e seus números de versão serão incrementados. 
Sistemas NFS
Os sevidores NFS se utilizam de chamadas RPC para prover acesso a arquivos remotos. Eles não guardam o estado das transações realizadas, o que faz com que não percam nenhuma informação enviada em caso de queda do servidor, além de agilizar sua recuperação. Sistema de arquivos distribuído desenvolvido inicialmente pela Sun e um dos mais usados em sistemas Unix. Em 1985 a Sun tornou publico o protocolo do NFS, o que permitiu que outras empresas e desenvolvedores pudessem criar clientes e servidores NFS
Em geral a performance do NFS não é tão boa quanto de outros servidores de arquivos distribuídos. Isso em geral é ocasionado por não possuir um esquema de cache do lado do cliente, o que faz com que as transações entre cliente e servidor sejam exageradas, causando um tráfego muito grande na rede
AFS 
O projeto ANDREW File System começou na Universidade de Carnegie Mellon em 1983, com suporte provido pela IBM. Seu objetivo era projetar e implementar um sistema de arquivos distribuído para o ambiente acadêmico que permitiria compartilhar uma estrutura comum de diretórios entre milhares de clientes. Quando um arquivo do AFS é aberto, todo o arquivo é baixado do servidor. Todas as operações de leitura e escrita são realizadas na cópia local do arquivo. Somente quando o arquivo é fechado (desde que ele tenha sido modificado) ele é então transferido de volta para o servidor.
O AFS-2 trouxe o conceito de callback, que permite ao cliente abrir e fechar um arquivo várias vezes sem precisar acessar o servidor. Quando um cliente receber um arquivo do servidor, ele também recebe um callback, que é uma promessa de que ele está com a versão mais recente do arquivo O AFS suporta um esquema de replicação simples, que pode ser usado para realizar um backup automático dos arquivos dos usuários e para replicação de diretórios read-only. 
Atualmente há mais de 100 células AFS por todo o mundo dando a seus usuários a possibilidade de compartilhar seus arquivos através de diferentes continentes usando uma interface de sistema de arquivos parecida com a do UNIX.
BRIDGE, O BRIDGE File System foi desenvolvido como um programa paralelo que mantém a estrutura lógica dos arquivos enquanto fisicamente os dados estão distribuídos entre os vários componentes que compõe o cluster. A idéia usada para atingir esse objetivo foi a de interleaved files, onde blocos lógicos consecutivos são armazenados em diferentes nós físicos. O serviço de nomes do BRIDGE é quem cuida de mapear um dado arquivo de seu sistema com os vários arquivos locais que constituem seus blocos nos múltiplos servidores de armazenamento, usando o nome associado a eles pelo sistema de arquivos local. A estrutura usada no BRIDGE consiste de 3 itens: O BRIDGE Server, junto com um conjunto de ferramentas para manipulação dos dados, o sistema de arquivos local de cada nó e o sistema de armazenamento físico
Como o armazenamento de um arquivo se dá usando uma ordem round-robin para distribuição de seus blocos entre os vários servidores, esta informação é suficiente para mapear um nome de arquivo e o número do bloco para um nome de arquivo correspondente local e seu bloco. Isso é uma grande vantagem, já que não é necessário ter algum servidor central para perguntar onde tal bloco de um arquivo se encontra, bastando apenas calcular sua localização.





 






